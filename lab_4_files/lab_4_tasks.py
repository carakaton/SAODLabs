from lab_4_files.stack import Stack
from lab_4_files.deque import Deque


# –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–∏–≥ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
def task_1():
    deque_1, deque_2 = Deque(), Deque()

    # –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    with open('lab_4_files/books.txt') as books:
        for book in books:
            print(book.rstrip())
            deque_1.push(book.rstrip())
        print()

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    while not deque_1.is_empty():
        element = deque_1.pop()
        while not deque_2.is_empty() and deque_2.peek() < element:
            deque_1.push_left(deque_2.pop())
        deque_2.push(element)

    # –í—ã–≤–æ–¥ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    while not deque_2.is_empty():
        print(deque_2.pop())


# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def task_2():

    # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
    def encode(symbol) -> chr:
        if ring.find(symbol) != -1:
            while True:
                if coding.peek_left() == symbol:
                    coding.push(coding.pop_left())
                    coding.push(coding.pop_left())
                    return coding.peek_left()
                coding.push(coding.pop_left())
        return symbol

    # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞
    def decode(symbol) -> chr:
        if ring.find(symbol) != -1:
            while True:
                if coding.peek() == symbol:
                    coding.push_left(coding.pop())
                    coding.push_left(coding.pop())
                    return coding.peek()
                coding.push_left(coding.pop())
        return symbol

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–∫–∞ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤
    ring = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è'
    coding = Deque()
    for char in ring:
        coding.push(char)

    # –ß—Ç–µ–Ω–∏–µ –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    encoded_text, decoded_text = '', ''
    with open('lab_4_files/encoded_text.txt') as text:
        for char in text.read():
            encoded_text += char
            decoded_text += decode(char)

    # –í—ã–≤–æ–¥ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    print(encoded_text + '\n')
    print(decoded_text)


# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –¥–∏—Å–∫–æ–≤ —Å–æ —Å—Ç–µ—Ä–∂–Ω—è –Ω–∞ —Å—Ç–µ—Ä–∂–µ–Ω—å
def task_3():

    # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ –¥–∏—Å–∫–∞ —Å –æ–¥–Ω–æ–≥–æ —Å—Ç–µ—Ä–∂–Ω—è –Ω–∞ –¥—Ä—É–≥–æ–π
    def move_disk(start, end):

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏, –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É—é—â–µ–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–µ—Ä–∂–Ω—è (|---)
        def tower_str(stack) -> str:
            string = '|'
            for element in stack.data:
                string += f'{element}'
            return string + '-' * (disk_count - len(stack))

        # –§–∏–∫—Å–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å—Ç–µ—Ä–∂–Ω–µ–π –¥–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        old_a, old_b, old_c = tower_str(a), tower_str(b), tower_str(c)

        # –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
        end.push(start.pop())

        # –í—ã–≤–æ–¥ —à–∞–≥–∞
        print()
        print(f'{old_a}         {tower_str(a)}')
        print(f'{old_b}   ‚Äî‚Äî>   {tower_str(b)}')
        print(f'{old_c}         {tower_str(c)}')

    # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    def tower_of_hanoi(numbers, start, auxiliary, end):
        if numbers == 1:
            move_disk(start, end)
            return
        tower_of_hanoi(numbers - 1, start, end, auxiliary)
        move_disk(start, end)
        tower_of_hanoi(numbers - 1, auxiliary, start, end)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–µ—Ä–∂–Ω–µ–π –∏ –≤–≤–æ–¥ –¥–∏—Å–∫–æ–≤
    a, b, c = Stack(), Stack(), Stack()
    disk_count = int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫–æ–≤: '))
    for i in range(disk_count):
        a.push(disk_count - i)

    # –ó–∞–ø—É—Å–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
    tower_of_hanoi(disk_count, a, b, c)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫
def task_4():
    with open('lab_4_files/code.txt') as code:
        stack = Stack()
        for char in code.read():
            if char == '(':
                stack.push('')
            if char == ')':
                if stack.is_empty():
                    print('–ë–∞–ª–∞–Ω—Å –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫ –≤ —Ñ–∞–π–ª–µ: False')
                    break
                stack.pop()
        else:
            print(f'–ë–∞–ª–∞–Ω—Å –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫ –≤ —Ñ–∞–π–ª–µ: {stack.is_empty()}')


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫
def task_5():
    with open('lab_4_files/code.txt') as code:
        deque = Deque()
        for char in code.read():
            if char == '[':
                deque.push('')
            if char == ']':
                if deque.is_empty():
                    print('–ë–∞–ª–∞–Ω—Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –≤ —Ñ–∞–π–ª–µ: False')
                    break
                deque.pop()
        else:
            print(f'–ë–∞–ª–∞–Ω—Å –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –≤ —Ñ–∞–π–ª–µ: {deque.is_empty()}')


# –í—ã–≤–æ–¥ –∏–∑ —Ñ–∞–π–ª–∞ —Å–Ω–∞—á–∞–ª–∞ —Ü–∏—Ñ—Ä, –ø–æ—Ç–æ–º –±—É–∫–≤, –∞ –ø–æ—Ç–æ–º –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
def task_6():
    digits, letters, others = Stack(), Stack(), Stack()

    # –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–µ–∫–æ–≤
    with open('lab_4_files/code.txt') as code:
        for char in code.read():
            if char.isdigit():
                digits.push(char.rstrip())
            elif char.isalpha():
                letters.push(char.rstrip())          
            elif char.rstrip() != '':
                others.push(char.rstrip())

    # –ê–ª–≥–æ—Ä–∏—Ç–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
    def stack_str(stack) -> str:
        output = ''
        while not stack.is_empty():
            output = stack.pop() + output
        return output

    # –í—ã–≤–æ–¥ —Å—Ç–µ–∫–æ–≤
    print(f'{stack_str(digits)}\n')
    print(f'{stack_str(letters)}\n')
    print(f'{stack_str(others)}')


# –í—ã–≤–æ–¥ —Å–Ω–∞—á–∞–ª–∞ –≤—Å–µ—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö, –∞ –ø–æ—Ç–æ–º –≤—Å–µ—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
def task_7():
    deque = Deque()

    # –ó–∞–ø–∏—Å—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –≤ –Ω–∞—á–∞–ª–æ, –∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –≤ –∫–æ–Ω–µ—Ü
    with open('lab_4_files/numbers.txt') as numbers:
        for number in numbers:
            print(number.rstrip(), end=' ')
            if int(number) < 0:
                deque.push_left(number.rstrip())
            else:
                deque.push(number.rstrip())
        print('\n')

    # '–í—ã–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ' –¥–µ–∫–∞, —á—Ç–æ–±—ã –≤—ã–≤–æ–¥ –±—ã–ª –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    while not int(deque.peek()) < 0:
        deque.push_left(deque.pop())

    # –í—ã–≤–æ–¥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    while int(deque.peek()) < 0:
        print(deque.pop(), end=' ')
    print()

    # –í—ã–≤–æ–¥ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª
    while not deque.is_empty():
        print(deque.pop_left(), end=' ')
    print()


# –í—ã–≤–µ—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
def task_8():
    # –ß—Ç–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    stack = Stack()
    with open('lab_4_files/books.txt') as books:
        for book in books:
            print(book.rstrip())
            stack.push(book)

    print('üîÑ')

    # –ó–∞–ø–∏—Å—å –∏ –≤—ã–≤–æ–¥ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    with open('lab_4_files/reversed_books.txt', 'w') as reversed_books:
        while not stack.is_empty():
            print(stack.peek().rstrip())
            reversed_books.write(stack.pop())
